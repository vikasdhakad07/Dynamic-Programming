Method 01: RECURSION


class Solution {
     public int solve(int i, int j, int matrix[][]){
        if(i==matrix.length-1){
            return matrix[i][j];
        }
        int min=Integer.MAX_VALUE;
        for(int k=0;k<matrix.length;k++){
            if(k!=j){
        min=Math.min(min,matrix[i][j]+solve(i+1,k,matrix));
            }
        }

        return min;
    }
    public int minFallingPathSum(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        int min=Integer.MAX_VALUE;
        for(int i=0;i<m;i++){
            min=Math.min(min, solve(0,i, grid));
        }
        return min;
    }
}



Method 02: RECURSION + MEMOISATION



class Solution {
     public int solve(int i, int j, int matrix[][],int dp[][]){
        if(i==matrix.length-1){
            return matrix[i][j];
        }

        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        int min=Integer.MAX_VALUE;
        for(int k=0;k<matrix.length;k++){
            if(k!=j){
        min=Math.min(min,matrix[i][j]+solve(i+1,k,matrix, dp));
            }
        }

        return dp[i][j]=min;
    }
    public int minFallingPathSum(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;

        int dp[][]=new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                dp[i][j]=-1;
            }
        }
        int min=Integer.MAX_VALUE;
        for(int i=0;i<m;i++){
            min=Math.min(min, solve(0,i, grid, dp));
        }
        return min;
    }
}
