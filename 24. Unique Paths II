Method 01: Unique Paths II


class Solution {
     public int solve(int [][] grid, int m, int n, int dp[][]){
          if (m == 0 && n == 0) {
            return 1;
        }
        if (m >= 0 && n >= 0 && grid[m][n] == 1) {
            return 0;
        }
        if (m < 0 || n < 0) {
            return 0;
        }
                
               if(dp[m][n]!=-1){
                   return dp[m][n];
               }
               else{
        return dp[m][n]=solve(grid,m-1,n,dp)+solve(grid,m,n-1,dp);
               }
    }
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m=obstacleGrid.length;
        int n=obstacleGrid[0].length;

            if (obstacleGrid[0][0] == 1) {
            return 0;
        }
        if (obstacleGrid[m - 1][n - 1] == 1) {
            return 0;
        }
         int dp[][]=new int[m][n];
      for(int i=0;i<m;i++){
          for(int j=0;j<n;j++){
              dp[i][j]=-1;
          }
      }
      return solve(obstacleGrid,m-1, n-1, dp);
    }
}
