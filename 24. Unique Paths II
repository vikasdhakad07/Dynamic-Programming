Method 01: RECURSION


class Solution {
    public int fun(int i, int j, int m, int n,int obstacleGrid[][]){

        
        if(i==m-1&&j==n-1&&obstacleGrid[i][j]!=1){
            return 1;
        }

        if(i>m-1||j>n-1||obstacleGrid[i][j]==1){
            return 0;
        }
      
       return fun(i+1,j,m,n,obstacleGrid)+fun(i,j+1,m,n,obstacleGrid);
    }
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m=obstacleGrid.length;
        int n=obstacleGrid[0].length;

        return fun(0,0,m,n,obstacleGrid);
    }
}


Method 02: RECURION + MEMOISATION


class Solution {
    public int fun(int i, int j, int m, int n,int obstacleGrid[][], int dp[][]){

        if(i==m-1&&j==n-1&&obstacleGrid[i][j]!=1){
            return 1;
        }

        if(i>m-1||j>n-1||obstacleGrid[i][j]==1){
            return 0;
        }
      
      if(dp[i][j]!=-1){
          return dp[i][j];
      }
       return dp[i][j]=fun(i+1,j,m,n,obstacleGrid,dp)+fun(i,j+1,m,n,obstacleGrid,dp);
    }
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m=obstacleGrid.length;
        int n=obstacleGrid[0].length;

        int dp[][]=new int[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                dp[i][j]=-1;
            }
        }
        return fun(0,0,m,n,obstacleGrid,dp);
    }
}
