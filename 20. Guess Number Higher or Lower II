Method 01: RECURSION


class Solution {
    public int solve(int start, int end){
        if(start>=end){
            return 0;
        }
        int min=Integer.MAX_VALUE;
        for(int i=start;i<end;i++){
            min=Math.min(min, i+Math.max(solve(start,i-1), solve(i+1, end)));
        }
        return min;
    }
    public int getMoneyAmount(int n) {
        return solve(1, n);
    }
}


Method 02: RECURSION + MEMOISATION


class Solution {
    public int solve(int start, int end, int dp[][]){
        if(start>=end){
            return 0;
        }

        if(dp[start][end]!=-1){
            return dp[start][end];
        }
        int min=Integer.MAX_VALUE;
        for(int i=start;i<=end;i++){
            min=Math.min(min, i+Math.max(solve(start,i-1, dp), solve(i+1, end, dp)));
        }
        return dp[start][end]=min;
    }
    public int getMoneyAmount(int n) {
        int dp[][]=new int[n+1][n+1];
        for(int i=0;i<=n;i++){
            for(int j=0;j<=n;j++){
            dp[i][j]=-1;
        }
        }
        return solve(1, n, dp);
}
}


METHOD 03: BOTTOM -UP


class Solution {
    public int solve(int n){
        int dp[][]=new int[n+2][n+2];
        for(int i=0;i<=n;i++){
            for(int j=0;j<=n;j++){
            dp[i][j]=0;
        }
        }

        for(int start=n;start>=1;start--){
            for(int end=start+1;end<=n;end++){
        int min=Integer.MAX_VALUE;
        for(int i=start;i<end;i++){
            min=Math.min(min, i+Math.max(dp[start][i-1], dp[i+1][end]));
        }
        dp[start][end]=min;
            }
        }
         return dp[1][n];
    }
      
    public int getMoneyAmount(int n) {
        return solve(n);
}
}
