Method 01: RECURSION


class Solution
{
    //Function to find the maximum number of cuts.
    public int fun(int n, int x, int y, int z){
        if(n==0){
            return 0;
        }
        
        if(n<0)
        return Integer.MIN_VALUE;
        
        int a=fun(n-x,x,y,z)+1;
        int b=fun(n-y,x,y,z)+1;
        int c=fun(n-z,x,y,z)+1;
       
       return Math.max(a,Math.max(b,c));
    }
    public int maximizeCuts(int n, int x, int y, int z)
    {
       //Your code here
       return fun(n, x,y,z);
    }
}


Method 02: RECURSION + MEMOISATION


class Solution
{
    //Function to find the maximum number of cuts.
    public int fun(int n, int x, int y, int z, int dp[]){
        if(n==0){
            return 0;
        }
        
        if(n<0)
        return Integer.MIN_VALUE;
        
        if(dp[n]!=-1){
            return dp[n];
        }
        int a=fun(n-x,x,y,z,dp)+1;
        int b=fun(n-y,x,y,z,dp)+1;
        int c=fun(n-z,x,y,z,dp)+1;
       
        dp[n]=Math.max(a,Math.max(b,c));
        
        return dp[n];
    }
    public int maximizeCuts(int n, int x, int y, int z)
    {
       //Your code here
       int dp[]=new int[n+1];
       Arrays.fill(dp,-1);
       int ans=fun(n, x,y,z, dp);
       if(ans<0)
       return 0;
           return ans;
    }
}
